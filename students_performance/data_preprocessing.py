# -*- coding: utf-8 -*-
"""data_preprocessing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/137r-ayp7ggxYdu_-59C9krRwEUgQ20ac

Required Libraries
"""

import joblib
import numpy as np
import pandas as pd

"""Loads all previously created objects used for data preprocessing."""

transformer_Age_at_enrollment = joblib.load("students_performance/model/transformer_Age_at_enrollment.joblib")
transformer_Curricular_units_1st_sem_grade = joblib.load("students_performance/model/transformer_Curricular_units_1st_sem_grade.joblib")
transformer_Curricular_units_2nd_sem_grade = joblib.load("students_performance/model/transformer_Curricular_units_2nd_sem_grade.joblib")
transformer_Debtor = joblib.load("students_performance/model/transformer_Debtor.joblib")
transformer_Displaced = joblib.load("students_performance/model/transformer_Displaced.joblib")
transformer_Educational_special_needs = joblib.load("students_performance/model/transformer_Educational_special_needs.joblib")
transformer_GDP = joblib.load("students_performance/model/transformer_GDP.joblib")
transformer_Gender = joblib.load("students_performance/model/transformer_Gender.joblib")
transformer_Scholarship_holder = joblib.load("students_performance/model/transformer_Scholarship_holder.joblib")
transformer_Tuition_fees_up_to_date = joblib.load("students_performance/model/transformer_Tuition_fees_up_to_date.joblib")
transformer_Unemployment_rate = joblib.load("students_performance/model/transformer_Unemployment_rate.joblib")

"""Define a function to perform the data preprocessing steps."""

def data_preprocessing(data):
    transformers = {
        "Age_at_enrollment": transformer_Age_at_enrollment,
        "Curricular_units_1st_sem_grade": transformer_Curricular_units_1st_sem_grade,
        "Curricular_units_2nd_sem_grade": transformer_Curricular_units_2nd_sem_grade,
        "Unemployment_rate": transformer_Unemployment_rate,
        "GDP": transformer_GDP,
        "Gender": transformer_Gender,
        "Displaced": transformer_Displaced,
        "Educational_special_needs": transformer_Educational_special_needs,
        "Debtor": transformer_Debtor,
        "Tuition_fees_up_to_date": transformer_Tuition_fees_up_to_date,
        "Scholarship_holder": transformer_Scholarship_holder   
    }

    transformed_data = {}
    for feature, transformer in transformers.items():
        value = transformer.transform(np.asarray(data[feature]).reshape(-1, 1)).flatten()[0]
        # Kolom DataFrame harus pakai prefix 'transform_'
        transformed_data["transform_" + feature] = value

    return pd.DataFrame([transformed_data])
