# -*- coding: utf-8 -*-
"""data_preprocessing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/137r-ayp7ggxYdu_-59C9krRwEUgQ20ac

Required Libraries
"""

import joblib
import numpy as np
import pandas as pd

"""Loads all previously created objects used for data preprocessing."""

transformer_Age_at_enrollment = joblib.load("model/transformer_Age_at_enrollment.joblib")
transformer_Curricular_units_1st_sem_grade = joblib.load("model/transformer_Curricular_units_1st_sem_grade.joblib")
transformer_Curricular_units_2nd_sem_grade = joblib.load("model/transformer_Curricular_units_2nd_sem_grade.joblib")
transformer_Debtor = joblib.load("model/transformer_Debtor.joblib")
transformer_Displaced = joblib.load("model/transformer_Displaced.joblib")
transformer_Educational_special_needs = joblib.load("model/transformer_Educational_special_needs.joblib")
transformer_GDP = joblib.load("model/transformer_GDP.joblib")
transformer_Gender = joblib.load("model/transformer_Gender.joblib")
transformer_Scholarship_holder = joblib.load("model/transformer_Scholarship_holder.joblib")
transformer_Tuition_fees_up_to_date = joblib.load("model/transformer_Tuition_fees_up_to_date.joblib")
transformer_Unemployment_rate = joblib.load("model/transformer_Unemployment_rate.joblib")

"""Define a function to perform the data preprocessing steps."""

def data_preprocessing(data):
    """Preprocessing data

    Args:
        data (Pandas DataFrame): Dataframe that contain all the data to make prediction

    return:
        Pandas DataFrame: Dataframe that contain all the preprocessed data
    """
    data = data.copy()
    df = pd.DataFrame()

    transformer_map = {
        "Age": transformer_Age_at_enrollment,
        "Curricular_units_1st_sem_grade": transformer_Curricular_units_1st_sem_grade,
        "Curricular_units_2nd_sem_grade": transformer_Curricular_units_2nd_sem_grade,
        "Debtor": transformer_Debtor,
        "Displaced": transformer_Displaced,
        "Educational_special_needs": transformer_Educational_special_needs,
        "GDP": transformer_GDP,
        "Gender": transformer_Gender,
        "Scholarship_holder": transformer_Scholarship_holder,
        "Tuition_fees_up_to_date": transformer_Tuition_fees_up_to_date,
        "Unemployment_rate": transformer_Unemployment_rate
    }

    # Loop through each column along with its corresponding transformer
    for col, transformer in transformer_map.items():
        df[col] = transformer.transform(data[col].values.reshape(-1, 1)).flatten()

    return df

