# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/122XskUfAnSdfW-JorqD3_pEO0jEZ3m2T
"""

import streamlit as st
import pandas as pd
import joblib
from data_preprocessing import data_preprocessing
from prediction import prediction

col1, col2 = st.columns([1, 5])
with col1:
    st.image("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQhe7Ng3rn0dVacN5iPEGG28szOrlmW0XII2TWj0Yalch-xvHe9309rTQJOdgdzy72EoFc&usqp=CAU", width=130)
with col2:
    st.header('Students Performance App (Prototype)')

data = pd.DataFrame()

col1, col2, col3 = st.columns(3)

with col1:
    transformer_Age_at_enrollment = int(st.number_input(label='Age_at_enrollment', value=23))
    data["transformer_Age_at_enrollment"] = [transformer_Age_at_enrollment]

with col2:
    gender_label = st.selectbox('Gender', ['Female', 'Male'])
    transformer_Gender = 0 if gender_label == 'Female' else 1
    data["transformer_Gender"] = [transformer_Gender]

with col3:
    transformer_GDP = float(st.number_input(label='GDP', value=0.0))
    data["transformer_GDP"] = [transformer_GDP]

col1, col2, col3 = st.columns(3)

with col1:
    displaced_label = st.selectbox('Displaced', ['No', 'Yes'])
    transformer_Displaced = 0 if displaced_label == 'No' else 1
    data["transformer_Displaced"] = [transformer_Displaced]

with col2:
    debtor_label = st.selectbox('Debtor', ['No', 'Yes'])
    transformer_Debtor = 0 if debtor_label == 'No' else 1
    data["transformer_Debtor"] = [transformer_Debtor]

with col3:
    transformer_Unemployment_rate = float(st.number_input(label='Unemployment_rate', value=11.6))
    data["transformer_Unemployment_rate"] = [transformer_Unemployment_rate]

col1, col2, col3 = st.columns(3)

with col1:
    educational_special_needs_label = st.selectbox('Educational_special_needs', ['No', 'Yes'])
    transformer_Educational_special_needs = 0 if educational_special_needs_label == 'No' else 1
    data["transformer_Educational_special_needs"] = [transformer_Educational_special_needs]

with col2:
    tuition_fees_up_to_date_label = st.selectbox('Tuition_fees_up_to_date', ['No', 'Yes'])
    transformer_Tuition_fees_up_to_date = 0 if tuition_fees_up_to_date_label == 'No' else 1
    data["transformer_Tuition_fees_up_to_date"] = [transformer_Tuition_fees_up_to_date]

with col3:
    scholarship_holder_label = st.selectbox('Scholarship_holder', ['No', 'Yes'])
    transformer_Scholarship_holder = 0 if scholarship_holder_label == 'No' else 1
    data["transformer_Scholarship_holder"] = [transformer_Scholarship_holder]

col1, col2 = st.columns(2)

with col1:
    transformer_Curricular_units_1st_sem_grade = float(st.number_input(label='Curricular_units_1st_sem_grade', value=10.64))
    data["transformer_Curricular_units_1st_sem_grade"] = [transformer_Curricular_units_1st_sem_grade]

with col2:
    transformer_Curricular_units_2nd_sem_grade = float(st.number_input(label='Curricular_units_2nd_sem_grade', value=10.23))
    data["transformer_Curricular_units_2nd_sem_grade"] = [transformer_Curricular_units_2nd_sem_grade]

with st.expander("View the Raw Data"):
    st.dataframe(data=data, width=800, height=50)

if st.button('Predict'):
    try:
        new_data = data_preprocessing(data=data)
        with st.expander("View the Preprocessed Data"):
            st.dataframe(data=new_data, width=800, height=50)
        result = prediction(new_data)
        st.write("Students Performance: {}".format(result))
    except Exception as e:
        st.error(f"Prediction error: {e}")
